/* ostree-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Ostree", gir_namespace = "OSTree", gir_version = "1.0", lower_case_cprefix = "ostree_")]
namespace Ostree {
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_async_progress_get_type ()")]
	public class AsyncProgress : GLib.Object {
		[CCode (has_construct_function = false)]
		public AsyncProgress ();
		[CCode (has_construct_function = false)]
		public AsyncProgress.and_connect (void* changed, void* user_data);
		[Version (since = "2019.6")]
		public void copy_state (Ostree.AsyncProgress dest);
		public void finish ();
		[Version (since = "2017.6")]
		public string? get_status ();
		public uint get_uint (string key);
		public uint64 get_uint64 (string key);
		[Version (since = "2017.6")]
		public GLib.Variant? get_variant (string key);
		[Version (since = "2017.6")]
		public void set_status (string? status);
		public void set_uint (string key, uint value);
		public void set_uint64 (string key, uint64 value);
		[Version (since = "2017.6")]
		public void set_variant (string key, GLib.Variant value);
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_bootconfig_parser_get_type ()")]
	public class BootconfigParser : GLib.Object {
		[CCode (has_construct_function = false)]
		public BootconfigParser ();
		public Ostree.BootconfigParser clone ();
		public unowned string @get (string key);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2020.7")]
		public unowned string[]? get_overlay_initrds ();
		public bool parse (GLib.File path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool parse_at (int dfd, string path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void @set (string key, string value);
		[Version (since = "2020.7")]
		public void set_overlay_initrds ([CCode (array_length = false, array_null_terminated = true)] string[]? initrds);
		public bool write (GLib.File output, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_at (int dfd, string path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ostree_collection_ref_get_type ()")]
	[Compact]
	[Version (since = "2018.6")]
	public class CollectionRef {
		public weak string collection_id;
		public weak string ref_name;
		[CCode (has_construct_function = false)]
		public CollectionRef (string? collection_id, string ref_name);
		public Ostree.CollectionRef dup ();
		[CCode (array_length = false, array_null_terminated = true)]
		public static Ostree.CollectionRef[] dupv ([CCode (array_length = false, array_null_terminated = true)] Ostree.CollectionRef[] refs);
		public static bool equal (void* ref1, void* ref2);
		[DestroysInstance]
		public void free ();
		public static void freev ([CCode (array_length = false, array_null_terminated = true)] owned Ostree.CollectionRef[] refs);
		public static uint hash (void* @ref);
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_collection_ref_get_type ()")]
	[Compact]
	public class CollectionRefv : Ostree.CollectionRef {
	}
	[CCode (cheader_filename = "ostree.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ostree_commit_sizes_entry_get_type ()")]
	[Compact]
	[Version (since = "2020.1")]
	public class CommitSizesEntry {
		public uint64 archived;
		public weak string checksum;
		public Ostree.ObjectType objtype;
		public uint64 unpacked;
		[CCode (has_construct_function = false)]
		public CommitSizesEntry (string checksum, Ostree.ObjectType objtype, uint64 unpacked, uint64 archived);
		public Ostree.CommitSizesEntry? copy ();
		[DestroysInstance]
		public void free ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_content_writer_get_type ()")]
	public class ContentWriter : GLib.OutputStream {
		[CCode (has_construct_function = false)]
		protected ContentWriter ();
		public string finish (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_deployment_get_type ()")]
	public class Deployment : GLib.Object {
		[CCode (has_construct_function = false)]
		public Deployment (int index, string osname, string csum, int deployserial, string? bootcsum, int bootserial);
		public Ostree.Deployment clone ();
		public bool equal (Ostree.Deployment bp);
		public unowned Ostree.BootconfigParser get_bootconfig ();
		public unowned string get_bootcsum ();
		public int get_bootserial ();
		public unowned string get_csum ();
		public int get_deployserial ();
		public int get_index ();
		public unowned GLib.KeyFile get_origin ();
		public string get_origin_relpath ();
		public unowned string get_osname ();
		[Version (since = "2016.4")]
		public Ostree.DeploymentUnlockedState get_unlocked ();
		public uint hash ();
		[Version (since = "2018.3")]
		public bool is_pinned ();
		[Version (since = "2018.3")]
		public bool is_staged ();
		[Version (since = "2018.3")]
		public static void origin_remove_transient_state (GLib.KeyFile origin);
		public void set_bootconfig (Ostree.BootconfigParser? bootconfig);
		public void set_bootserial (int index);
		public void set_index (int index);
		public void set_origin (GLib.KeyFile? origin);
		[Version (since = "2016.4")]
		public static unowned string unlocked_state_to_string (Ostree.DeploymentUnlockedState state);
	}
	[CCode (cheader_filename = "ostree.h", ref_function = "ostree_diff_item_ref", type_id = "ostree_diff_item_get_type ()", unref_function = "ostree_diff_item_unref")]
	[Compact]
	public class DiffItem {
		public int refcount;
		public weak GLib.File src;
		public weak string src_checksum;
		public weak GLib.FileInfo src_info;
		public weak GLib.File target;
		public weak string target_checksum;
		public weak GLib.FileInfo target_info;
		public Ostree.DiffItem @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_gpg_verify_result_get_type ()")]
	public class GpgVerifyResult : GLib.Object, GLib.Initable {
		[CCode (has_construct_function = false)]
		protected GpgVerifyResult ();
		public uint count_all ();
		public uint count_valid ();
		public void describe (uint signature_index, GLib.StringBuilder output_buffer, string? line_prefix, Ostree.GpgSignatureFormatFlags flags);
		public static void describe_variant (GLib.Variant variant, GLib.StringBuilder output_buffer, string? line_prefix, Ostree.GpgSignatureFormatFlags flags);
		public unowned GLib.Variant @get (uint signature_index, [CCode (array_length_cname = "n_attrs", array_length_pos = 2.1, array_length_type = "guint")] Ostree.GpgSignatureAttr[] attrs);
		public unowned GLib.Variant get_all (uint signature_index);
		public bool lookup (string key_id, out uint out_signature_index);
		[Version (since = "2016.6")]
		public bool require_valid_signature () throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	[Compact]
	public class KernelArgs {
		[Version (since = "2019.3")]
		public void append (string arg);
		[Version (since = "2019.3")]
		public void append_argv (string argv);
		[Version (since = "2019.3")]
		public void append_argv_filtered (string argv, string prefixes);
		[Version (since = "2022.5")]
		public void append_if_missing (string arg);
		[Version (since = "2019.3")]
		public bool append_proc_cmdline (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2019.3")]
		public static void cleanup (void* loc);
		[Version (since = "2022.7")]
		public bool contains (string arg);
		public bool @delete (string arg) throws GLib.Error;
		[Version (since = "2022.7")]
		public bool delete_if_present (string arg) throws GLib.Error;
		[Version (since = "2019.3")]
		public bool delete_key_entry (string key) throws GLib.Error;
		[Version (since = "2019.3")]
		public void free ();
		[Version (since = "2019.3")]
		public unowned string get_last_value (string key);
		[Version (since = "2019.3")]
		public bool new_replace (string arg) throws GLib.Error;
		[Version (since = "2019.3")]
		public void parse_append (string options);
		[Version (since = "2019.3")]
		public void replace (string arg);
		[Version (since = "2019.3")]
		public void replace_argv (string argv);
		[Version (since = "2019.3")]
		public void replace_take (owned string arg);
		[Version (since = "2019.3")]
		public string to_string ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2019.3")]
		public string[] to_strv ();
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	[Compact]
	public class KernelArgsEntry {
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_mutable_tree_get_type ()")]
	public class MutableTree : GLib.Object {
		[CCode (has_construct_function = false)]
		public MutableTree ();
		[Version (since = "2018.7")]
		public bool check_error () throws GLib.Error;
		public bool ensure_dir (string name, out Ostree.MutableTree out_subdir) throws GLib.Error;
		public bool ensure_parent_dirs (GLib.GenericArray<string> split_path, string metadata_checksum, out Ostree.MutableTree out_parent) throws GLib.Error;
		[Version (since = "2018.7")]
		public bool fill_empty_from_dirtree (Ostree.Repo repo, string contents_checksum, string metadata_checksum);
		[CCode (has_construct_function = false)]
		[Version (since = "2018.7")]
		public MutableTree.from_checksum (Ostree.Repo repo, string contents_checksum, string metadata_checksum);
		[CCode (has_construct_function = false)]
		[Version (since = "2021.5")]
		public MutableTree.from_commit (Ostree.Repo repo, string rev) throws GLib.Error;
		public unowned string get_contents_checksum ();
		public unowned GLib.HashTable<string,string> get_files ();
		public unowned string get_metadata_checksum ();
		public unowned GLib.HashTable<string,Ostree.MutableTree> get_subdirs ();
		public bool lookup (string name, out string? out_file_checksum, out Ostree.MutableTree? out_subdir) throws GLib.Error;
		[Version (since = "2018.9")]
		public bool remove (string name, bool allow_noent) throws GLib.Error;
		public bool replace_file (string name, string checksum) throws GLib.Error;
		public void set_contents_checksum (string checksum);
		public void set_metadata_checksum (string checksum);
		public bool walk (GLib.GenericArray<string> split_path, uint start, out Ostree.MutableTree out_subdir) throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", ref_function = "ostree_remote_ref", type_id = "ostree_remote_get_type ()", unref_function = "ostree_remote_unref")]
	[Compact]
	[Version (since = "2018.6")]
	public class Remote {
		public unowned string get_name ();
		public string get_url ();
		public Ostree.Remote @ref ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_get_type ()")]
	public class Repo : GLib.Object {
		[CCode (has_construct_function = false)]
		public Repo (GLib.File path);
		public bool abort_transaction (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool add_gpg_signature_summary ([CCode (array_length = false, array_null_terminated = true)] string[] key_id, string? homedir, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool append_gpg_signature (string commit_checksum, GLib.Bytes signature_bytes, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.8")]
		public bool checkout_at (Ostree.RepoCheckoutAtOptions? options, int destination_dfd, string destination_path, string commit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool checkout_gc (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool checkout_tree (Ostree.RepoCheckoutMode mode, Ostree.RepoCheckoutOverwriteMode overwrite_mode, GLib.File destination, Ostree.RepoFile source, GLib.FileInfo source_info, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool commit_transaction (out unowned Ostree.RepoTransactionStats out_stats, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GLib.KeyFile copy_config ();
		public bool create (Ostree.RepoMode mode, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.10")]
		public static Ostree.Repo create_at (int dfd, string path, Ostree.RepoMode mode, GLib.Variant? options, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Repo.@default ();
		public bool delete_object (Ostree.ObjectType objtype, string sha256, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.12")]
		public bool equal (Ostree.Repo b);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2018.6")]
		public async Ostree.RepoFinderResult[] find_remotes_async ([CCode (array_length = false, array_null_terminated = true)] Ostree.CollectionRef[] refs, GLib.Variant? options, [CCode (array_length = false, array_null_terminated = true)] Ostree.RepoFinder[] finders, Ostree.AsyncProgress? progress, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Repo.for_sysroot_path (GLib.File repo_path, GLib.File sysroot_path);
		[Version (since = "2017.15")]
		public bool fsck_object (Ostree.ObjectType objtype, string sha256, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2019.2")]
		public unowned string get_bootloader ();
		[Version (since = "2018.6")]
		public unowned string? get_collection_id ();
		public unowned GLib.KeyFile get_config ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2018.9")]
		public unowned string[] get_default_repo_finders ();
		[Version (since = "2016.4")]
		public int get_dfd ();
		public bool get_disable_fsync ();
		[Version (since = "2018.9")]
		public bool get_min_free_space_bytes (out uint64 out_reserved_bytes) throws GLib.Error;
		public Ostree.RepoMode get_mode ();
		public unowned Ostree.Repo get_parent ();
		public unowned GLib.File get_path ();
		[Version (since = "2016.5")]
		public bool get_remote_boolean_option (string remote_name, string option_name, bool default_value, out bool out_value) throws GLib.Error;
		[Version (since = "2016.5")]
		public bool get_remote_list_option (string remote_name, string option_name, [CCode (array_length = false, array_null_terminated = true)] out string[] out_value) throws GLib.Error;
		[Version (since = "2016.5")]
		public bool get_remote_option (string remote_name, string option_name, string? default_value, out string out_value) throws GLib.Error;
		[Version (since = "2020.8")]
		public bool gpg_sign_data (GLib.Bytes data, GLib.Bytes old_signatures, [CCode (array_length = false, array_null_terminated = true)] string[] key_id, string? homedir, out GLib.Bytes out_signatures, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.6")]
		public Ostree.GpgVerifyResult gpg_verify_data (string? remote_name, GLib.Bytes data, GLib.Bytes signatures, GLib.File? keyringdir, GLib.File? extra_keyring, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool has_object (Ostree.ObjectType objtype, string checksum, out bool out_have_object, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.12")]
		public uint hash ();
		public bool import_object_from (Ostree.Repo source, Ostree.ObjectType objtype, string checksum, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.5")]
		public bool import_object_from_with_trust (Ostree.Repo source, Ostree.ObjectType objtype, string checksum, bool trusted, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool is_system ();
		public bool is_writable () throws GLib.Error;
		[Version (since = "2018.6")]
		public bool list_collection_refs (string? match_collection_id, out GLib.HashTable<weak Ostree.CollectionRef,weak string> out_all_refs, Ostree.RepoListRefsExtFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool list_commit_objects_starting_with (string start, out GLib.HashTable<weak GLib.Variant,weak GLib.Variant> out_commits, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool list_objects (Ostree.RepoListObjectsFlags flags, out GLib.HashTable<weak GLib.Variant,weak GLib.Variant> out_objects, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool list_refs (string? refspec_prefix, out GLib.HashTable<weak string,weak string> out_all_refs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.4")]
		public bool list_refs_ext (string? refspec_prefix, out GLib.HashTable<weak string,weak string> out_all_refs, Ostree.RepoListRefsExtFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.8")]
		public bool list_static_delta_indexes (out GLib.GenericArray<weak string> out_indexes, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool list_static_delta_names (out GLib.GenericArray<weak string> out_deltas, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool load_commit (string checksum, out GLib.Variant out_commit, out Ostree.RepoCommitState out_state) throws GLib.Error;
		public bool load_file (string checksum, out GLib.InputStream? out_input, out GLib.FileInfo? out_file_info, out GLib.Variant? out_xattrs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool load_object_stream (Ostree.ObjectType objtype, string checksum, out GLib.InputStream out_input, out uint64 out_size, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool load_variant (Ostree.ObjectType objtype, string sha256, out GLib.Variant out_variant) throws GLib.Error;
		public bool load_variant_if_exists (Ostree.ObjectType objtype, string sha256, out GLib.Variant? out_variant) throws GLib.Error;
		[Version (since = "2021.3")]
		public bool lock_pop (Ostree.RepoLockType lock_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2021.3")]
		public bool lock_push (Ostree.RepoLockType lock_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.15")]
		public bool mark_commit_partial (string checksum, bool is_partial) throws GLib.Error;
		[Version (since = "2019.4")]
		public bool mark_commit_partial_reason (string checksum, bool is_partial, Ostree.RepoCommitState in_state) throws GLib.Error;
		public static bool mode_from_string (string mode, out Ostree.RepoMode out_mode) throws GLib.Error;
		public bool open (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.10")]
		public static Ostree.Repo open_at (int dfd, string path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool prepare_transaction (out bool out_transaction_resume, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool prune (Ostree.RepoPruneFlags flags, int depth, out int out_objects_total, out int out_objects_pruned, out uint64 out_pruned_object_size_total, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.1")]
		public bool prune_from_reachable (Ostree.RepoPruneOptions options, out int out_objects_total, out int out_objects_pruned, out uint64 out_pruned_object_size_total, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool prune_static_deltas (string? commit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool pull (string remote_name, [CCode (array_length = false, array_null_terminated = true)] string[]? refs_to_fetch, Ostree.RepoPullFlags flags, Ostree.AsyncProgress? progress, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static void pull_default_console_progress_changed (Ostree.AsyncProgress progress, void* user_data);
		[Version (since = "2018.6")]
		public async bool pull_from_remotes_async ([CCode (array_length = false, array_null_terminated = true)] Ostree.RepoFinderResult[] results, GLib.Variant? options, Ostree.AsyncProgress? progress, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool pull_one_dir (string remote_name, string dir_to_pull, [CCode (array_length = false, array_null_terminated = true)] string[]? refs_to_fetch, Ostree.RepoPullFlags flags, Ostree.AsyncProgress? progress, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool pull_with_options (string remote_name_or_baseurl, GLib.Variant options, Ostree.AsyncProgress? progress, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool query_object_storage_size (Ostree.ObjectType objtype, string sha256, out uint64 out_size, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool read_commit (string @ref, out GLib.File out_root, out string out_commit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool read_commit_detached_metadata (string checksum, out GLib.Variant? out_metadata, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool regenerate_summary (GLib.Variant? additional_metadata, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.2")]
		public bool reload_config (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool remote_add (string name, string? url, GLib.Variant? options, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool remote_change (GLib.File? sysroot, Ostree.RepoRemoteChange changeop, string name, string? url, GLib.Variant? options, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool remote_delete (string name, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool remote_fetch_summary (string name, out GLib.Bytes out_summary, out GLib.Bytes out_signatures, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.6")]
		public bool remote_fetch_summary_with_options (string name, GLib.Variant? options, out GLib.Bytes out_summary, out GLib.Bytes out_signatures, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2021.4")]
		public bool remote_get_gpg_keys (string? name, [CCode (array_length = false, array_null_terminated = true)] string[]? key_ids, out GLib.GenericArray<weak GLib.Variant> out_keys, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool remote_get_gpg_verify (string name, out bool out_gpg_verify) throws GLib.Error;
		public bool remote_get_gpg_verify_summary (string name, out bool out_gpg_verify_summary) throws GLib.Error;
		public bool remote_get_url (string name, out string out_url) throws GLib.Error;
		public bool remote_gpg_import (string name, GLib.InputStream? source_stream, [CCode (array_length = false, array_null_terminated = true)] string[]? key_ids, out uint out_imported, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		public string[] remote_list ();
		[Version (since = "2018.6")]
		public bool remote_list_collection_refs (string remote_name, out GLib.HashTable<weak Ostree.CollectionRef,weak string> out_all_refs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool remote_list_refs (string remote_name, out GLib.HashTable<weak string,weak string> out_all_refs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.6")]
		public bool resolve_collection_ref (Ostree.CollectionRef @ref, bool allow_noent, Ostree.RepoResolveRevExtFlags flags, out string? out_rev, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.6")]
		public Ostree.Remote resolve_keyring_for_collection (string collection_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool resolve_rev (string refspec, bool allow_noent, out string? out_rev) throws GLib.Error;
		[Version (since = "2016.7")]
		public bool resolve_rev_ext (string refspec, bool allow_noent, Ostree.RepoResolveRevExtFlags flags, out string? out_rev) throws GLib.Error;
		public bool scan_hardlinks (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.10")]
		public bool set_alias_ref_immediate (string? remote, string @ref, string? target, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.5")]
		public bool set_cache_dir (int dfd, string path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.6")]
		public bool set_collection_id (string? collection_id) throws GLib.Error;
		[Version (since = "2018.6")]
		public bool set_collection_ref_immediate (Ostree.CollectionRef @ref, string? checksum, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void set_disable_fsync (bool disable_fsync);
		public bool set_ref_immediate (string? remote, string @ref, string? checksum, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool sign_commit (string commit_checksum, string key_id, string? homedir, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool sign_delta (string from_commit, string to_commit, string key_id, string homedir, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool signature_verify_commit_data (string remote_name, GLib.Bytes commit_data, GLib.Bytes commit_metadata, Ostree.RepoVerifyFlags flags, out string? out_results) throws GLib.Error;
		public bool static_delta_execute_offline (GLib.File dir_or_file, bool skip_validation, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.7")]
		public bool static_delta_execute_offline_with_signature (GLib.File dir_or_file, Ostree.Sign sign, bool skip_validation, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool static_delta_generate (Ostree.StaticDeltaGenerateOpt opt, string? from, string to, GLib.Variant? metadata, GLib.Variant? @params, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.8")]
		public bool static_delta_reindex (Ostree.StaticDeltaIndexFlags flags, string opt_to_commit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.7")]
		public bool static_delta_verify_signature (string delta_id, Ostree.Sign sign, out string? out_success_message) throws GLib.Error;
		[Version (since = "2018.6")]
		public void transaction_set_collection_ref (Ostree.CollectionRef @ref, string? checksum);
		public void transaction_set_ref (string? remote, string @ref, string? checksum);
		public void transaction_set_refspec (string refspec, string? checksum);
		public bool traverse_commit (string commit_checksum, int maxdepth, out GLib.HashTable<weak GLib.Variant,weak GLib.Variant> out_reachable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.5")]
		public static GLib.HashTable<weak GLib.Variant,weak GLib.Variant> traverse_new_parents ();
		public static GLib.HashTable<weak GLib.Variant,weak GLib.Variant> traverse_new_reachable ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2018.5")]
		public static string[] traverse_parents_get_commits (GLib.HashTable<void*,void*> parents, GLib.Variant object);
		[Version (since = "2018.6")]
		public bool traverse_reachable_refs (uint depth, GLib.HashTable<GLib.Variant,GLib.Variant> reachable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool verify_commit (string commit_checksum, GLib.File? keyringdir, GLib.File? extra_keyring, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Ostree.GpgVerifyResult verify_commit_ext (string commit_checksum, GLib.File? keyringdir, GLib.File? extra_keyring, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.14")]
		public Ostree.GpgVerifyResult verify_commit_for_remote (string commit_checksum, string remote_name, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Ostree.GpgVerifyResult verify_summary (string remote_name, GLib.Bytes summary, GLib.Bytes signatures, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_archive_to_mtree (GLib.File archive, Ostree.MutableTree mtree, Ostree.RepoCommitModifier? modifier, bool autocreate_parents, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_archive_to_mtree_from_fd (int fd, Ostree.MutableTree mtree, Ostree.RepoCommitModifier? modifier, bool autocreate_parents, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_commit (string? parent, string? subject, string? body, GLib.Variant? metadata, Ostree.RepoFile root, out string out_commit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_commit_detached_metadata (string checksum, GLib.Variant? metadata, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_commit_with_time (string? parent, string? subject, string? body, GLib.Variant? metadata, Ostree.RepoFile root, uint64 time, out string out_commit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_config (GLib.KeyFile new_config) throws GLib.Error;
		public bool write_content (string? expected_checksum, GLib.InputStream object_input, uint64 length, [CCode (array_length = false)] out uint8 out_csum[32], GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool write_content_async (string? expected_checksum, GLib.InputStream object, uint64 length, GLib.Cancellable? cancellable, out uint8 out_csum) throws GLib.Error;
		public bool write_content_trusted (string checksum, GLib.InputStream object_input, uint64 length, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_dfd_to_mtree (int dfd, string path, Ostree.MutableTree mtree, Ostree.RepoCommitModifier? modifier, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_directory_to_mtree (GLib.File dir, Ostree.MutableTree mtree, Ostree.RepoCommitModifier? modifier, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_metadata (Ostree.ObjectType objtype, string? expected_checksum, GLib.Variant object, [CCode (array_length = false)] out uint8 out_csum[32], GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool write_metadata_async (Ostree.ObjectType objtype, string? expected_checksum, GLib.Variant object, GLib.Cancellable? cancellable, [CCode (array_length = false)] out uint8 out_csum[32]) throws GLib.Error;
		public bool write_metadata_stream_trusted (Ostree.ObjectType objtype, string checksum, GLib.InputStream object_input, uint64 length, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_metadata_trusted (Ostree.ObjectType objtype, string checksum, GLib.Variant variant, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_mtree (Ostree.MutableTree mtree, out GLib.File out_file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2021.2")]
		public Ostree.ContentWriter write_regfile (string? expected_checksum, uint32 uid, uint32 gid, uint32 mode, uint64 content_len, GLib.Variant? xattrs) throws GLib.Error;
		[Version (since = "2021.2")]
		public string write_regfile_inline (string? expected_checksum, uint32 uid, uint32 gid, uint32 mode, GLib.Variant? xattrs, [CCode (array_length_cname = "len", array_length_pos = 6.5, array_length_type = "gsize")] uint8[] buf, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2021.2")]
		public string write_symlink (string? expected_checksum, uint32 uid, uint32 gid, GLib.Variant? xattrs, string symlink_target, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GLib.File path { get; construct; }
		[NoAccessorMethod]
		public string remotes_config_dir { owned get; construct; }
		[NoAccessorMethod]
		public GLib.File sysroot_path { owned get; construct; }
		public signal void gpg_verify_result (string checksum, Ostree.GpgVerifyResult result);
	}
	[CCode (cheader_filename = "ostree.h", ref_function = "ostree_repo_commit_modifier_ref", type_id = "ostree_repo_commit_modifier_get_type ()", unref_function = "ostree_repo_commit_modifier_unref")]
	[Compact]
	public class RepoCommitModifier {
		[CCode (has_construct_function = false)]
		public RepoCommitModifier (Ostree.RepoCommitModifierFlags flags, owned Ostree.RepoCommitFilter? commit_filter);
		public Ostree.RepoCommitModifier @ref ();
		[Version (since = "2017.13")]
		public void set_devino_cache (Ostree.RepoDevInoCache cache);
		public void set_sepolicy (Ostree.SePolicy? sepolicy);
		[Version (since = "2020.4")]
		public bool set_sepolicy_from_commit (Ostree.Repo repo, string rev, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void set_xattr_callback ([CCode (delegate_target_pos = 1.2, destroy_notify_pos = 1.1)] owned Ostree.RepoCommitModifierXattrCallback callback);
		public void unref ();
	}
	[CCode (cheader_filename = "ostree.h", lower_case_csuffix = "repo_devino_cache", ref_function = "ostree_repo_devino_cache_ref", type_id = "ostree_repo_devino_cache_get_type ()", unref_function = "ostree_repo_devino_cache_unref")]
	[Compact]
	public class RepoDevInoCache {
		[CCode (has_construct_function = false)]
		public RepoDevInoCache ();
		public Ostree.RepoDevInoCache @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_file_get_type ()")]
	public class RepoFile : GLib.Object, GLib.File {
		[CCode (has_construct_function = false)]
		protected RepoFile ();
		public bool ensure_resolved () throws GLib.Error;
		public unowned string get_checksum ();
		public unowned Ostree.Repo get_repo ();
		public unowned Ostree.RepoFile get_root ();
		public bool get_xattrs (out GLib.Variant out_xattrs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public int tree_find_child (string name, out bool is_dir, out GLib.Variant out_container);
		public GLib.Variant tree_get_contents ();
		public unowned string tree_get_contents_checksum ();
		public GLib.Variant tree_get_metadata ();
		public unowned string tree_get_metadata_checksum ();
		public bool tree_query_child (int n, string attributes, GLib.FileQueryInfoFlags flags, out GLib.FileInfo out_info, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void tree_set_metadata (string checksum, GLib.Variant metadata);
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_finder_avahi_get_type ()")]
	public class RepoFinderAvahi : GLib.Object, Ostree.RepoFinder {
		[CCode (has_construct_function = false)]
		[Version (since = "2018.6")]
		public RepoFinderAvahi (GLib.MainContext? context);
		[Version (since = "2018.6")]
		public void start () throws GLib.Error;
		[Version (since = "2018.6")]
		public void stop ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_finder_config_get_type ()")]
	public class RepoFinderConfig : GLib.Object, Ostree.RepoFinder {
		[CCode (has_construct_function = false)]
		[Version (since = "2018.6")]
		public RepoFinderConfig ();
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_finder_mount_get_type ()")]
	public class RepoFinderMount : GLib.Object, Ostree.RepoFinder {
		[CCode (has_construct_function = false)]
		[Version (since = "2018.6")]
		public RepoFinderMount (GLib.VolumeMonitor? monitor);
		[NoAccessorMethod]
		[Version (since = "2018.6")]
		public GLib.VolumeMonitor monitor { owned get; construct; }
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_finder_override_get_type ()")]
	public class RepoFinderOverride : GLib.Object, Ostree.RepoFinder {
		[CCode (has_construct_function = false)]
		[Version (since = "2018.6")]
		public RepoFinderOverride ();
		[Version (since = "2018.6")]
		public void add_uri (string uri);
	}
	[CCode (cheader_filename = "ostree.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ostree_repo_finder_result_get_type ()")]
	[Compact]
	[Version (since = "2018.6")]
	public class RepoFinderResult {
		public weak Ostree.RepoFinder finder;
		public int priority;
		public weak GLib.HashTable<Ostree.CollectionRef,string> ref_to_checksum;
		public weak GLib.HashTable<Ostree.CollectionRef,uint64> ref_to_timestamp;
		public weak Ostree.Remote remote;
		public uint64 summary_last_modified;
		[CCode (has_construct_function = false)]
		public RepoFinderResult (Ostree.Remote remote, Ostree.RepoFinder finder, int priority, GLib.HashTable<Ostree.CollectionRef,string> ref_to_checksum, GLib.HashTable<Ostree.CollectionRef,uint64>? ref_to_timestamp, uint64 summary_last_modified);
		public int compare (Ostree.RepoFinderResult b);
		public Ostree.RepoFinderResult dup ();
		[DestroysInstance]
		public void free ();
		public static void freev ([CCode (array_length = false, array_null_terminated = true)] owned Ostree.RepoFinderResult[] results);
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_repo_finder_result_get_type ()")]
	[Compact]
	public class RepoFinderResultv : Ostree.RepoFinderResult {
	}
	[CCode (cheader_filename = "ostree.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ostree_repo_transaction_stats_get_type ()")]
	[Compact]
	public class RepoTransactionStats {
		public uint64 content_bytes_written;
		public uint content_objects_total;
		public uint content_objects_written;
		public uint devino_cache_hits;
		public uint metadata_objects_total;
		public uint metadata_objects_written;
		public uint padding1;
		public uint64 padding2;
		public uint64 padding3;
		public uint64 padding4;
	}
	[CCode (cheader_filename = "ostree.h", lower_case_csuffix = "sepolicy", type_id = "ostree_sepolicy_get_type ()")]
	public class SePolicy : GLib.Object, GLib.Initable {
		[CCode (has_construct_function = false)]
		public SePolicy (GLib.File path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "2017.4")]
		public SePolicy.at (int rootfs_dfd, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public SePolicy.from_commit (Ostree.Repo repo, string rev, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static void fscreatecon_cleanup (void* unused);
		[Version (since = "2016.5")]
		public unowned string get_csum ();
		public bool get_label (string relpath, uint32 unix_mode, out string out_label, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public unowned string get_name ();
		public unowned GLib.File get_path ();
		public bool restorecon (string path, GLib.FileInfo? info, GLib.File target, Ostree.SePolicyRestoreconFlags flags, out string out_new_label, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool setfscreatecon (string path, uint32 mode) throws GLib.Error;
		public GLib.File path { get; construct; }
		[NoAccessorMethod]
		public int rootfs_dfd { get; construct; }
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	[Compact]
	public class SignEd25519 {
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_sysroot_get_type ()")]
	public class Sysroot : GLib.Object {
		[CCode (has_construct_function = false)]
		public Sysroot (GLib.File? path);
		public bool cleanup (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.6")]
		public bool cleanup_prune_repo (Ostree.RepoPruneOptions options, out int out_objects_total, out int out_objects_pruned, out uint64 out_pruned_object_size_total, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Sysroot.@default ();
		[Version (since = "2018.5")]
		public bool deploy_tree (string? osname, string revision, GLib.KeyFile? origin, Ostree.Deployment? provided_merge_deployment, [CCode (array_length = false, array_null_terminated = true)] string[]? override_kernel_argv, out Ostree.Deployment out_new_deployment, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.7")]
		public bool deploy_tree_with_options (string? osname, string revision, GLib.KeyFile? origin, Ostree.Deployment? provided_merge_deployment, Ostree.SysrootDeployTreeOpts? opts, out Ostree.Deployment out_new_deployment, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool deployment_set_kargs (Ostree.Deployment deployment, [CCode (array_length = false, array_null_terminated = true)] string[] new_kargs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool deployment_set_kargs_in_place (Ostree.Deployment deployment, string? kargs_str, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool deployment_set_mutable (Ostree.Deployment deployment, bool is_mutable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.3")]
		public bool deployment_set_pinned (Ostree.Deployment deployment, bool is_pinned) throws GLib.Error;
		[Version (since = "2016.4")]
		public bool deployment_unlock (Ostree.Deployment deployment, Ostree.DeploymentUnlockedState unlocked_state, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool ensure_initialized (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public unowned Ostree.Deployment? get_booted_deployment ();
		public int get_bootversion ();
		public GLib.File get_deployment_directory (Ostree.Deployment deployment);
		public string get_deployment_dirpath (Ostree.Deployment deployment);
		public static GLib.File get_deployment_origin_path (GLib.File deployment_path);
		public GLib.GenericArray<weak Ostree.Deployment> get_deployments ();
		public int get_fd ();
		public Ostree.Deployment? get_merge_deployment (string? osname);
		public unowned GLib.File get_path ();
		public bool get_repo (out Ostree.Repo out_repo, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.5")]
		public unowned Ostree.Deployment? get_staged_deployment ();
		public int get_subbootversion ();
		[Version (since = "2016.4")]
		public bool init_osname (string osname, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.1")]
		public bool initialize () throws GLib.Error;
		[Version (since = "2022.7")]
		public bool initialize_with_mount_namespace (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.1")]
		public bool is_booted ();
		public bool load (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2016.4")]
		public bool load_if_changed (out bool out_changed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool @lock () throws GLib.Error;
		public async bool lock_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.KeyFile origin_new_from_refspec (string refspec);
		public bool prepare_cleanup (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.7")]
		public void query_deployments_for (string? osname, out Ostree.Deployment? out_pending, out Ostree.Deployment? out_rollback);
		[Version (since = "2017.7")]
		public unowned Ostree.Repo repo ();
		[Version (since = "2021.1")]
		public unowned Ostree.Deployment require_booted_deployment () throws GLib.Error;
		[Version (since = "2020.1")]
		public void set_mount_namespace_in_use ();
		public bool simple_write_deployment (string? osname, Ostree.Deployment new_deployment, Ostree.Deployment? merge_deployment, Ostree.SysrootSimpleWriteDeploymentFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.7")]
		public bool stage_overlay_initrd (int fd, out string out_checksum, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2018.5")]
		public bool stage_tree (string? osname, string revision, GLib.KeyFile? origin, Ostree.Deployment? merge_deployment, [CCode (array_length = false, array_null_terminated = true)] string[]? override_kernel_argv, out Ostree.Deployment out_new_deployment, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.7")]
		public bool stage_tree_with_options (string? osname, string revision, GLib.KeyFile? origin, Ostree.Deployment? merge_deployment, Ostree.SysrootDeployTreeOpts opts, out Ostree.Deployment out_new_deployment, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool try_lock (out bool out_acquired) throws GLib.Error;
		public void unload ();
		public void @unlock ();
		public bool write_deployments (GLib.GenericArray<Ostree.Deployment> new_deployments, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2017.4")]
		public bool write_deployments_with_options (GLib.GenericArray<Ostree.Deployment> new_deployments, Ostree.SysrootWriteDeploymentsOpts opts, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool write_origin_file (Ostree.Deployment deployment, GLib.KeyFile? new_origin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GLib.File path { get; construct; }
		[Version (since = "2017.10")]
		public signal void journal_msg (string msg);
	}
	[CCode (cheader_filename = "ostree.h", type_id = "ostree_sysroot_upgrader_get_type ()")]
	public class SysrootUpgrader : GLib.Object, GLib.Initable {
		[CCode (has_construct_function = false)]
		public SysrootUpgrader (Ostree.Sysroot sysroot, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static bool check_timestamps (Ostree.Repo repo, string from_rev, string to_rev) throws GLib.Error;
		public bool deploy (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GLib.KeyFile dup_origin ();
		[CCode (has_construct_function = false)]
		public SysrootUpgrader.for_os (Ostree.Sysroot sysroot, string? osname, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public SysrootUpgrader.for_os_with_flags (Ostree.Sysroot sysroot, string? osname, Ostree.SysrootUpgraderFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public unowned GLib.KeyFile get_origin ();
		public string get_origin_description ();
		public bool pull (Ostree.RepoPullFlags flags, Ostree.SysrootUpgraderPullFlags upgrader_flags, Ostree.AsyncProgress? progress, out bool out_changed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool pull_one_dir (string dir_to_pull, Ostree.RepoPullFlags flags, Ostree.SysrootUpgraderPullFlags upgrader_flags, Ostree.AsyncProgress? progress, out bool out_changed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool set_origin (GLib.KeyFile? origin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[NoAccessorMethod]
		public Ostree.SysrootUpgraderFlags flags { get; construct; }
		[NoAccessorMethod]
		public string osname { owned get; construct; }
		[NoAccessorMethod]
		public Ostree.Sysroot sysroot { owned get; construct; }
	}
	[CCode (cheader_filename = "ostree.h", type_cname = "OstreeRepoFinderInterface", type_id = "ostree_repo_finder_get_type ()")]
	public interface RepoFinder : GLib.Object {
		[Version (since = "2018.6")]
		public static async GLib.GenericArray<Ostree.RepoFinderResult> resolve_all_async ([CCode (array_length = false, array_null_terminated = true)] Ostree.RepoFinder[] finders, [CCode (array_length = false, array_null_terminated = true)] Ostree.CollectionRef[] refs, Ostree.Repo parent_repo, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "2018.6")]
		public abstract async GLib.GenericArray<Ostree.RepoFinderResult> resolve_async ([CCode (array_length = false, array_null_terminated = true)] Ostree.CollectionRef[] refs, Ostree.Repo parent_repo, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", type_cname = "OstreeSignInterface", type_id = "ostree_sign_get_type ()")]
	public interface Sign : GLib.Object {
		[Version (since = "2020.2")]
		public abstract bool add_pk (GLib.Variant public_key) throws GLib.Error;
		[Version (since = "2020.2")]
		public abstract bool clear_keys () throws GLib.Error;
		[Version (since = "2020.2")]
		public bool commit (Ostree.Repo repo, string commit_checksum, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.2")]
		public bool commit_verify (Ostree.Repo repo, string commit_checksum, out string? out_success_message, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.2")]
		public abstract bool data (GLib.Bytes data, out GLib.Bytes signature, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "2020.2")]
		public abstract bool data_verify (GLib.Bytes data, GLib.Variant signatures, out string? out_success_message) throws GLib.Error;
		public bool ed25519_add_pk (GLib.Variant public_key) throws GLib.Error;
		public bool ed25519_clear_keys () throws GLib.Error;
		public bool ed25519_data (GLib.Bytes data, GLib.Bytes signature, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool ed25519_data_verify (GLib.Bytes data, GLib.Variant signatures, string out_success_message) throws GLib.Error;
		public unowned string ed25519_get_name ();
		public bool ed25519_load_pk (GLib.Variant options) throws GLib.Error;
		public unowned string ed25519_metadata_format ();
		public unowned string ed25519_metadata_key ();
		public bool ed25519_set_pk (GLib.Variant public_key) throws GLib.Error;
		public bool ed25519_set_sk (GLib.Variant secret_key) throws GLib.Error;
		[Version (since = "2020.2")]
		public static GLib.GenericArray<Ostree.Sign> get_all ();
		[Version (since = "2020.2")]
		public static Ostree.Sign get_by_name (string name) throws GLib.Error;
		[Version (since = "2020.2")]
		public abstract unowned string get_name ();
		[Version (since = "2020.2")]
		public abstract bool load_pk (GLib.Variant options) throws GLib.Error;
		[Version (since = "2020.2")]
		public abstract unowned string metadata_format ();
		[Version (since = "2020.2")]
		public abstract unowned string metadata_key ();
		[Version (since = "2020.2")]
		public abstract bool set_pk (GLib.Variant public_key) throws GLib.Error;
		[Version (since = "2020.2")]
		public abstract bool set_sk (GLib.Variant secret_key) throws GLib.Error;
		[Version (since = "2020.2")]
		public bool summary (Ostree.Repo repo, GLib.Variant keys, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct DiffDirsOptions {
		public int owner_uid;
		public int owner_gid;
		public weak Ostree.RepoDevInoCache devino_to_csum_cache;
		[CCode (array_length = false)]
		public weak bool unused_bools[7];
		[CCode (array_length = false)]
		public weak int unused_ints[6];
		[CCode (array_length = false)]
		public weak void* unused_ptrs[7];
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct MutableTreeIter {
		public bool in_files;
		public GLib.HashTableIter iter;
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct RepoCheckoutAtOptions {
		public Ostree.RepoCheckoutMode mode;
		public Ostree.RepoCheckoutOverwriteMode overwrite_mode;
		public bool enable_uncompressed_cache;
		public bool enable_fsync;
		public bool process_whiteouts;
		public bool no_copy_fallback;
		public bool force_copy;
		public bool bareuseronly_dirs;
		public bool force_copy_zerosized;
		public bool process_passthrough_whiteouts;
		[CCode (array_length = false)]
		public weak bool unused_bools[3];
		public weak string subpath;
		public weak Ostree.RepoDevInoCache devino_to_csum_cache;
		[CCode (array_length = false)]
		public weak int unused_ints[6];
		[CCode (array_length = false)]
		public weak void* unused_ptrs[3];
		public weak Ostree.RepoCheckoutFilter filter;
		public void* filter_user_data;
		public weak Ostree.SePolicy sepolicy;
		public weak string sepolicy_prefix;
		[Version (since = "2017.13")]
		public void set_devino (Ostree.RepoDevInoCache? cache);
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct RepoCommitTraverseIter {
		public bool initialized;
		[CCode (array_length = false)]
		public weak void* dummy[10];
		[CCode (array_length = false)]
		public weak char dummy_checksum_data[130];
		public static void cleanup (void* p);
		public void clear ();
		public void get_dir (out unowned string out_name, out unowned string out_content_checksum, out unowned string out_meta_checksum);
		public void get_file (out unowned string out_name, out unowned string out_checksum);
		public bool init_commit (Ostree.Repo repo, GLib.Variant commit, Ostree.RepoCommitTraverseFlags flags) throws GLib.Error;
		public bool init_dirtree (Ostree.Repo repo, GLib.Variant dirtree, Ostree.RepoCommitTraverseFlags flags) throws GLib.Error;
		public Ostree.RepoCommitIterResult next (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct RepoPruneOptions {
		public Ostree.RepoPruneFlags flags;
		public weak GLib.HashTable<void*,void*> reachable;
		[CCode (array_length = false)]
		public weak bool unused_bools[6];
		[CCode (array_length = false)]
		public weak int unused_ints[6];
		[CCode (array_length = false)]
		public weak void* unused_ptrs[7];
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct SignEd25519Class {
		public weak GLib.ObjectClass parent_class;
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct SysrootDeployTreeOpts {
		[CCode (array_length = false)]
		public weak bool unused_bools[8];
		[CCode (array_length = false)]
		public weak int unused_ints[8];
		public weak string override_kernel_argv;
		public weak string overlay_initrds;
		[CCode (array_length = false)]
		public weak void* unused_ptrs[6];
	}
	[CCode (cheader_filename = "ostree.h", has_type_id = false)]
	public struct SysrootWriteDeploymentsOpts {
		public bool do_postclean;
		[CCode (array_length = false)]
		public weak bool unused_bools[7];
		[CCode (array_length = false)]
		public weak int unused_ints[7];
		[CCode (array_length = false)]
		public weak void* unused_ptrs[7];
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_CHECKSUM_FLAGS_", has_type_id = false)]
	[Flags]
	[Version (since = "2017.13")]
	public enum ChecksumFlags {
		NONE,
		IGNORE_XATTRS,
		CANONICAL_PERMISSIONS
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_DEPLOYMENT_UNLOCKED_", has_type_id = false)]
	public enum DeploymentUnlockedState {
		NONE,
		DEVELOPMENT,
		HOTFIX,
		TRANSIENT
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_DIFF_FLAGS_", has_type_id = false)]
	[Flags]
	public enum DiffFlags {
		NONE,
		IGNORE_XATTRS
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_GPG_SIGNATURE_ATTR_", has_type_id = false)]
	public enum GpgSignatureAttr {
		VALID,
		SIG_EXPIRED,
		KEY_EXPIRED,
		KEY_REVOKED,
		KEY_MISSING,
		FINGERPRINT,
		TIMESTAMP,
		EXP_TIMESTAMP,
		PUBKEY_ALGO_NAME,
		HASH_ALGO_NAME,
		USER_NAME,
		USER_EMAIL,
		FINGERPRINT_PRIMARY,
		KEY_EXP_TIMESTAMP,
		KEY_EXP_TIMESTAMP_PRIMARY
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_GPG_SIGNATURE_FORMAT_", has_type_id = false)]
	[Flags]
	public enum GpgSignatureFormatFlags {
		[CCode (cname = "OSTREE_GPG_SIGNATURE_FORMAT_DEFAULT")]
		GPG_SIGNATURE_FORMAT_DEFAULT
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_OBJECT_TYPE_", has_type_id = false)]
	public enum ObjectType {
		FILE,
		DIR_TREE,
		DIR_META,
		COMMIT,
		TOMBSTONE_COMMIT,
		COMMIT_META,
		PAYLOAD_LINK,
		FILE_XATTRS,
		FILE_XATTRS_LINK;
		public static Ostree.ObjectType from_string (string str);
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_CHECKOUT_FILTER_", has_type_id = false)]
	[Version (since = "2018.2")]
	public enum RepoCheckoutFilterResult {
		ALLOW,
		SKIP
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_CHECKOUT_MODE_", has_type_id = false)]
	public enum RepoCheckoutMode {
		NONE,
		USER
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_CHECKOUT_OVERWRITE_", has_type_id = false)]
	public enum RepoCheckoutOverwriteMode {
		NONE,
		UNION_FILES,
		ADD_FILES,
		UNION_IDENTICAL
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_COMMIT_FILTER_", has_type_id = false)]
	public enum RepoCommitFilterResult {
		ALLOW,
		SKIP
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_COMMIT_ITER_RESULT_", has_type_id = false)]
	public enum RepoCommitIterResult {
		ERROR,
		END,
		FILE,
		DIR
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_COMMIT_MODIFIER_FLAGS_", has_type_id = false)]
	[Flags]
	public enum RepoCommitModifierFlags {
		NONE,
		SKIP_XATTRS,
		GENERATE_SIZES,
		CANONICAL_PERMISSIONS,
		ERROR_ON_UNLABELED,
		CONSUME,
		DEVINO_CANONICAL
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_COMMIT_STATE_", has_type_id = false)]
	[Flags]
	[Version (since = "2015.7")]
	public enum RepoCommitState {
		NORMAL,
		PARTIAL,
		FSCK_PARTIAL
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_COMMIT_TRAVERSE_FLAG_", has_type_id = false)]
	[Flags]
	public enum RepoCommitTraverseFlags {
		NONE,
		COMMIT_ONLY
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_LIST_OBJECTS_", has_type_id = false)]
	[Flags]
	public enum RepoListObjectsFlags {
		LOOSE,
		PACKED,
		ALL,
		NO_PARENTS
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_LIST_REFS_EXT_", has_type_id = false)]
	[Flags]
	public enum RepoListRefsExtFlags {
		NONE,
		ALIASES,
		EXCLUDE_REMOTES,
		EXCLUDE_MIRRORS
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_LOCK_", has_type_id = false)]
	[Version (since = "2021.3")]
	public enum RepoLockType {
		SHARED,
		EXCLUSIVE
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_MODE_", has_type_id = false)]
	public enum RepoMode {
		BARE,
		ARCHIVE,
		ARCHIVE_Z2,
		BARE_USER,
		BARE_USER_ONLY,
		BARE_SPLIT_XATTRS
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_PRUNE_FLAGS_", has_type_id = false)]
	[Flags]
	public enum RepoPruneFlags {
		NONE,
		NO_PRUNE,
		REFS_ONLY,
		COMMIT_ONLY
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_PULL_FLAGS_", has_type_id = false)]
	[Flags]
	public enum RepoPullFlags {
		NONE,
		MIRROR,
		COMMIT_ONLY,
		UNTRUSTED,
		BAREUSERONLY_FILES,
		TRUSTED_HTTP
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_REMOTE_CHANGE_", has_type_id = false)]
	public enum RepoRemoteChange {
		ADD,
		ADD_IF_NOT_EXISTS,
		DELETE,
		DELETE_IF_EXISTS,
		REPLACE
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_RESOLVE_REV_EXT_", has_type_id = false)]
	[Flags]
	public enum RepoResolveRevExtFlags {
		NONE,
		LOCAL_ONLY
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_REPO_VERIFY_FLAGS_", has_type_id = false)]
	[Flags]
	[Version (since = "2021.4")]
	public enum RepoVerifyFlags {
		NONE,
		NO_GPG,
		NO_SIGNAPI
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_SEPOLICY_RESTORECON_FLAGS_", has_type_id = false)]
	[Flags]
	public enum SePolicyRestoreconFlags {
		NONE,
		ALLOW_NOLABEL,
		KEEP_EXISTING
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_STATIC_DELTA_GENERATE_OPT_", has_type_id = false)]
	public enum StaticDeltaGenerateOpt {
		LOWLATENCY,
		MAJOR
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_STATIC_DELTA_INDEX_FLAGS_", has_type_id = false)]
	public enum StaticDeltaIndexFlags {
		[CCode (cname = "OSTREE_STATIC_DELTA_INDEX_FLAGS_NONE")]
		STATIC_DELTA_INDEX_FLAGS_NONE
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_SYSROOT_SIMPLE_WRITE_DEPLOYMENT_FLAGS_", has_type_id = false)]
	[Flags]
	public enum SysrootSimpleWriteDeploymentFlags {
		NONE,
		RETAIN,
		NOT_DEFAULT,
		NO_CLEAN,
		RETAIN_PENDING,
		RETAIN_ROLLBACK
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_SYSROOT_UPGRADER_FLAGS_", type_id = "ostree_sysroot_upgrader_flags_get_type ()")]
	[Flags]
	public enum SysrootUpgraderFlags {
		IGNORE_UNCONFIGURED,
		STAGE
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_SYSROOT_UPGRADER_PULL_FLAGS_", has_type_id = false)]
	[Flags]
	public enum SysrootUpgraderPullFlags {
		NONE,
		ALLOW_OLDER,
		SYNTHETIC
	}
	[CCode (cheader_filename = "ostree.h", cprefix = "OSTREE_GPG_ERROR_", has_type_id = false)]
	[Version (since = "2017.10")]
	public errordomain GpgError {
		NO_SIGNATURE,
		INVALID_SIGNATURE,
		MISSING_KEY,
		EXPIRED_SIGNATURE,
		EXPIRED_KEY,
		REVOKED_KEY;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "ostree.h", instance_pos = 3.9)]
	[Version (since = "2018.2")]
	public delegate Ostree.RepoCheckoutFilterResult RepoCheckoutFilter (Ostree.Repo repo, string path, void* stbuf);
	[CCode (cheader_filename = "ostree.h", instance_pos = 3.9)]
	public delegate Ostree.RepoCommitFilterResult RepoCommitFilter (Ostree.Repo repo, string path, GLib.FileInfo file_info);
	[CCode (cheader_filename = "ostree.h", instance_pos = 3.9)]
	public delegate GLib.Variant RepoCommitModifierXattrCallback (Ostree.Repo repo, string path, GLib.FileInfo file_info);
	[CCode (cheader_filename = "ostree.h", instance_pos = 3.9)]
	[Version (since = "2017.11")]
	public delegate string RepoImportArchiveTranslatePathname (Ostree.Repo repo, void* stbuf, string src_path);
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_GVARIANT_STRING")]
	public const string COMMIT_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_ARCHITECTURE")]
	[Version (since = "2020.4")]
	public const string COMMIT_META_KEY_ARCHITECTURE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_COLLECTION_BINDING")]
	[Version (since = "2018.6")]
	public const string COMMIT_META_KEY_COLLECTION_BINDING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_ENDOFLIFE")]
	[Version (since = "2017.7")]
	public const string COMMIT_META_KEY_ENDOFLIFE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_ENDOFLIFE_REBASE")]
	[Version (since = "2017.7")]
	public const string COMMIT_META_KEY_ENDOFLIFE_REBASE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_REF_BINDING")]
	[Version (since = "2017.9")]
	public const string COMMIT_META_KEY_REF_BINDING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_SOURCE_TITLE")]
	[Version (since = "2017.13")]
	public const string COMMIT_META_KEY_SOURCE_TITLE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_COMMIT_META_KEY_VERSION")]
	[Version (since = "2014.9")]
	public const string COMMIT_META_KEY_VERSION;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_DIRMETA_GVARIANT_STRING")]
	public const string DIRMETA_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_FILEMETA_GVARIANT_STRING")]
	public const string FILEMETA_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_GPG_KEY_GVARIANT_STRING")]
	public const string GPG_KEY_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_MAX_METADATA_SIZE")]
	public const int MAX_METADATA_SIZE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_MAX_METADATA_WARN_SIZE")]
	public const int MAX_METADATA_WARN_SIZE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_METADATA_KEY_BOOTABLE")]
	[Version (since = "2021.1")]
	public const string METADATA_KEY_BOOTABLE;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_METADATA_KEY_LINUX")]
	[Version (since = "2021.1")]
	public const string METADATA_KEY_LINUX;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_META_KEY_DEPLOY_COLLECTION_ID")]
	[Version (since = "2018.9")]
	public const string META_KEY_DEPLOY_COLLECTION_ID;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_ORIGIN_TRANSIENT_GROUP")]
	[Version (since = "2018.3")]
	public const string ORIGIN_TRANSIENT_GROUP;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_PATH_BOOTED")]
	[Version (since = "2022.2")]
	public const string PATH_BOOTED;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_RELEASE_VERSION")]
	[Version (since = "2017.4")]
	public const int RELEASE_VERSION;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_REPO_METADATA_REF")]
	[Version (since = "2018.6")]
	public const string REPO_METADATA_REF;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_SHA256_DIGEST_LEN")]
	public const int SHA256_DIGEST_LEN;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_SHA256_STRING_LEN")]
	public const int SHA256_STRING_LEN;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_SIGN_NAME_ED25519")]
	[Version (since = "2020.4")]
	public const string SIGN_NAME_ED25519;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_SUMMARY_GVARIANT_STRING")]
	public const string SUMMARY_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_SUMMARY_SIG_GVARIANT_STRING")]
	public const string SUMMARY_SIG_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_TIMESTAMP")]
	public const int TIMESTAMP;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_TREE_GVARIANT_STRING")]
	public const string TREE_GVARIANT_STRING;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_VERSION")]
	[Version (since = "2017.4")]
	public const double VERSION;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_VERSION_S")]
	[Version (since = "2017.4")]
	public const string VERSION_S;
	[CCode (cheader_filename = "ostree.h", cname = "OSTREE_YEAR_VERSION")]
	[Version (since = "2017.4")]
	public const int YEAR_VERSION;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2017.15")]
	public static bool break_hardlink (int dfd, string path, bool skip_xattrs, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2017.4")]
	public static bool check_version (uint required_year, uint required_release);
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2016.8")]
	public static string checksum_b64_from_bytes ([CCode (array_length = false)] uint8 csum[32]);
	[CCode (array_length = false, array_length_cexpr = "32", cheader_filename = "ostree.h")]
	[Version (since = "2016.8")]
	public static uint8[] checksum_b64_to_bytes (string checksum);
	[CCode (array_length = false, array_length_cexpr = "32", cheader_filename = "ostree.h")]
	public static unowned uint8[] checksum_bytes_peek (GLib.Variant bytes);
	[CCode (array_length = false, array_length_cexpr = "32", cheader_filename = "ostree.h")]
	public static unowned uint8[] checksum_bytes_peek_validate (GLib.Variant bytes) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool checksum_file (GLib.File f, Ostree.ObjectType objtype, [CCode (array_length = false)] out uint8 out_csum[32], GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static async void checksum_file_async (GLib.File f, Ostree.ObjectType objtype, int io_priority, GLib.Cancellable? cancellable);
	[CCode (cheader_filename = "ostree.h")]
	public static bool checksum_file_async_finish (GLib.File f, GLib.AsyncResult result, [CCode (array_length = false)] out uint8 out_csum[32]) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2017.13")]
	public static bool checksum_file_at (int dfd, string path, void* stbuf, Ostree.ObjectType objtype, Ostree.ChecksumFlags flags, string out_checksum, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool checksum_file_from_input (GLib.FileInfo file_info, GLib.Variant? xattrs, GLib.InputStream? @in, Ostree.ObjectType objtype, [CCode (array_length = false)] out uint8 out_csum[32], GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static string checksum_from_bytes ([CCode (array_length = false)] uint8 csum[32]);
	[CCode (cheader_filename = "ostree.h")]
	public static string checksum_from_bytes_v (GLib.Variant csum_v);
	[CCode (cheader_filename = "ostree.h")]
	public static void checksum_inplace_to_bytes (string checksum, uint8 buf);
	[CCode (array_length = false, array_length_cexpr = "32", cheader_filename = "ostree.h")]
	public static uint8[] checksum_to_bytes (string checksum);
	[CCode (cheader_filename = "ostree.h")]
	public static GLib.Variant checksum_to_bytes_v (string checksum);
	[CCode (cheader_filename = "ostree.h")]
	public static int cmp_checksum_bytes (uint8 a, uint8 b);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "ostree.h")]
	[Version (replacement = "CollectionRef.dupv", since = "2018.6")]
	public static Ostree.CollectionRef[] collection_ref_dupv ([CCode (array_length = false, array_null_terminated = true)] Ostree.CollectionRef[] refs);
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "CollectionRef.equal", since = "2018.6")]
	public static bool collection_ref_equal (void* ref1, void* ref2);
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "CollectionRef.freev", since = "2018.6")]
	public static void collection_ref_freev ([CCode (array_length = false, array_null_terminated = true)] owned Ostree.CollectionRef[] refs);
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "CollectionRef.hash", since = "2018.6")]
	public static uint collection_ref_hash (void* @ref);
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2018.2")]
	public static string? commit_get_content_checksum (GLib.Variant commit_variant);
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2020.1")]
	public static bool commit_get_object_sizes (GLib.Variant commit_variant, out GLib.GenericArray<weak Ostree.CommitSizesEntry> out_sizes_entries) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static string commit_get_parent (GLib.Variant commit_variant);
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2016.3")]
	public static uint64 commit_get_timestamp (GLib.Variant commit_variant);
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2021.1")]
	public static bool commit_metadata_for_bootable (GLib.File root, GLib.VariantDict dict, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool content_file_parse (bool compressed, GLib.File content_path, bool trusted, out GLib.InputStream out_input, out GLib.FileInfo out_file_info, out GLib.Variant out_xattrs, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool content_file_parse_at (bool compressed, int parent_dfd, string path, bool trusted, out GLib.InputStream out_input, out GLib.FileInfo out_file_info, out GLib.Variant out_xattrs, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool content_stream_parse (bool compressed, GLib.InputStream input, uint64 input_length, bool trusted, out GLib.InputStream out_input, out GLib.FileInfo out_file_info, out GLib.Variant out_xattrs, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static GLib.Variant create_directory_metadata (GLib.FileInfo dir_info, GLib.Variant? xattrs);
	[CCode (cheader_filename = "ostree.h")]
	public static bool diff_dirs (Ostree.DiffFlags flags, GLib.File a, GLib.File b, GLib.GenericArray<Ostree.DiffItem> modified, GLib.GenericArray<GLib.File> removed, GLib.GenericArray<GLib.File> added, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2017.4")]
	public static bool diff_dirs_with_options (Ostree.DiffFlags flags, GLib.File a, GLib.File b, GLib.GenericArray<Ostree.DiffItem> modified, GLib.GenericArray<GLib.File> removed, GLib.GenericArray<GLib.File> added, Ostree.DiffDirsOptions? options, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static void diff_print (GLib.File a, GLib.File b, GLib.GenericArray<Ostree.DiffItem> modified, GLib.GenericArray<GLib.File> removed, GLib.GenericArray<GLib.File> added);
	[CCode (cheader_filename = "ostree.h")]
	public static GLib.Variant fs_get_all_xattrs (int fd, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static GLib.Variant fs_get_all_xattrs_at (int dfd, string path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static uint hash_object_name (void* a);
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "KernelArgs.cleanup", since = "2019.3")]
	public static void kernel_args_cleanup (void* loc);
	[CCode (cheader_filename = "ostree.h")]
	public static unowned GLib.VariantType metadata_variant_type (Ostree.ObjectType objtype);
	[CCode (cheader_filename = "ostree.h")]
	public static void object_from_string (string str, out string out_checksum, out Ostree.ObjectType out_objtype);
	[CCode (cheader_filename = "ostree.h")]
	public static void object_name_deserialize (GLib.Variant variant, out unowned string out_checksum, out Ostree.ObjectType out_objtype);
	[CCode (cheader_filename = "ostree.h")]
	public static unowned GLib.Variant object_name_serialize (string checksum, Ostree.ObjectType objtype);
	[CCode (cheader_filename = "ostree.h")]
	public static string object_to_string (string checksum, Ostree.ObjectType objtype);
	[CCode (cheader_filename = "ostree.h")]
	public static bool parse_refspec (string refspec, out string? out_remote, out string out_ref) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2016.6")]
	public static bool raw_file_to_archive_z2_stream (GLib.InputStream input, GLib.FileInfo file_info, GLib.Variant? xattrs, out GLib.InputStream out_input, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2017.3")]
	public static bool raw_file_to_archive_z2_stream_with_options (GLib.InputStream input, GLib.FileInfo file_info, GLib.Variant? xattrs, GLib.Variant? options, out GLib.InputStream out_input, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool raw_file_to_content_stream (GLib.InputStream input, GLib.FileInfo file_info, GLib.Variant? xattrs, out GLib.InputStream out_input, out uint64 out_length, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "RepoCommitTraverseIter.cleanup")]
	public static void repo_commit_traverse_iter_cleanup (void* p);
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "RepoFinder.resolve_all_async", since = "2018.6")]
	public static async GLib.GenericArray<Ostree.RepoFinderResult> repo_finder_resolve_all_async ([CCode (array_length = false, array_null_terminated = true)] Ostree.RepoFinder[] finders, [CCode (array_length = false, array_null_terminated = true)] Ostree.CollectionRef[] refs, Ostree.Repo parent_repo, GLib.Cancellable? cancellable) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "RepoFinderResult.freev", since = "2018.6")]
	public static void repo_finder_result_freev ([CCode (array_length = false, array_null_terminated = true)] owned Ostree.RepoFinderResult[] results);
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "Sign.get_all", since = "2020.2")]
	public static GLib.GenericArray<Ostree.Sign> sign_get_all ();
	[CCode (cheader_filename = "ostree.h")]
	[Version (replacement = "Sign.get_by_name", since = "2020.2")]
	public static Ostree.Sign sign_get_by_name (string name) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_checksum_string (string sha256) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2018.6")]
	public static bool validate_collection_id (string? collection_id) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	[Version (since = "2017.8")]
	public static bool validate_remote_name (string remote_name) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_rev (string rev) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_checksum_string (string checksum) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_commit (GLib.Variant commit) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_csum_v (GLib.Variant checksum) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_dirmeta (GLib.Variant dirmeta) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_dirtree (GLib.Variant dirtree) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_file_mode (uint32 mode) throws GLib.Error;
	[CCode (cheader_filename = "ostree.h")]
	public static bool validate_structureof_objtype (uint8 objtype) throws GLib.Error;
}
